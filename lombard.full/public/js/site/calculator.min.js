/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 84);
/******/ })
/************************************************************************/
/******/ ({

/***/ 84:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(85);


/***/ }),

/***/ 85:
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

globalFunctions.getData = function (url, callback, params) {

    function query(url, params) {
        axios.get(url, params).then(function (response) {
            callback(response);
        }).catch(function (error) {
            console.log(error);
        });
    };

    query(url, params);
};
globalFunctions.getLanguage = function () {
    return document.body.dataset.locale;
};

globalVariables.messages = {
    successResponse: globalFunctions.getLanguage() === 'ru' ? 'Спасибо! ваша заявка принята!' : 'Дякуємо! Ваша заявка прийнята!',
    successDescr: globalFunctions.getLanguage() === 'ru' ? 'Мы свяжемся с вами в ближайшее время.' : "Ми зв'яжемося з вами найближчим часом.",
    errorResponse: globalFunctions.getLanguage() === 'ru' ? 'Ошибка!' : 'Помилка!',
    errorResponseGadgets: globalFunctions.getLanguage() === 'ru' ? 'Для просчета стоимости рекомендуем обратиться по адресу ближайшего отделения.' : 'Для розрахунку вартості радимо звернутись за адресою найближчого відділення.',
    errorDescr: globalFunctions.getLanguage() === 'ru' ? 'Попробуйте еще раз' : 'спробуйте ще раз',
    errorDescr400: globalFunctions.getLanguage() === 'ru' ? 'Превышена максимальная сумма' : 'Перевищено максимальну суму',

    yes: globalFunctions.getLanguage() === 'ru' ? 'Да' : 'Так',
    no: globalFunctions.getLanguage() === 'ru' ? 'Нет' : 'Нi',
    gold: globalFunctions.getLanguage() === 'ru' ? 'Золото' : 'Золото',
    silver: globalFunctions.getLanguage() === 'ru' ? 'Серебро' : 'Срiбло',

    isPhoto: globalFunctions.getLanguage() === 'ru' ? 'Необходимо добавить фото изделия' : 'Необхідно завантажити фото виробу',

    transported_to: globalFunctions.getLanguage() === 'ru' ? 'Перенесено в №' : 'Перенесено до №',
    find_nothing: globalFunctions.getLanguage() === 'ru' ? 'Ничего не найдено!' : 'Нічого не знайдено!',
    work_time: globalFunctions.getLanguage() === 'ru' ? 'Время работы' : 'Час роботи'

    // console.log(globalFunctions)

};$(document).ready(function () {
    /* begin calculator staff */
    var models, selectedModel;

    (function () {
        if (!$('#calculatorPage').length && !$('#specialPage').length) return;

        var $hellmarksSelectGold = $('#2');
        var $hellmarksSelectSilver = $('#32');
        var $tariffsSelectGold = $('#3');
        var $tariffsChoosenGold = $('#3_chosen');
        var $statusSelectGold = $('#4');
        var $tariffsSelectSilver = $('#35');
        var $tariffsChoosenSilver = $('#35_chosen');
        var $statusSelectSilver = $('#36');
        var $goldSlider = $('#gold-tab .slider-range');
        var $silverSlider = $('#silver-tab .slider-range');
        var wasSubmited = false;

        function findDropzoneInstance(htmlElement) {
            var element = htmlElement instanceof jQuery ? htmlElement[0] : htmlElement;

            var result = void 0;
            if (globalVariables.myDropzone.length) {
                for (var i = 0; i < globalVariables.myDropzone.length; i++) {
                    if (globalVariables.myDropzone[i].element.id === element.id) {
                        result = globalVariables.myDropzone[i];break;
                    }
                }
            }
            return result;
        }

        function resetForm(formElement) {
            var form = formElement instanceof jQuery ? formElement[0] : formElement;
            form.reset();
            $(form).find('.chosen-wrapper  select').trigger("chosen:updated");

            if ($(form).is('#technics-form')) {
                models = null;selectedModel = null;
                form.querySelector('.resultBlock .product-description input[name="price"]').value = '';
                form.querySelector('.resultBlock .imgWrapper input[name="image"]').value = '';
                var dropzone = findDropzoneInstance(document.getElementById('photoDropzoneGadgets'));
                dropzone.removeAllFiles(true);
            }
        }

        function clearResultBlock(formElement) {
            var form = formElement instanceof jQuery ? formElement[0] : formElement;
            form.querySelector('.resultBlock .product-description .name').innerHTML = '';
            form.querySelector('.resultBlock .product-description .price').innerHTML = '';
            // form.querySelector('.resultBlock .imgWrapper > img').src = 'img/image_mock.jpg';
            $(form).find('.resultBlock .imgWrapper > img').hide();
            form.querySelector('.resultBlock .condition > p').innerHTML = '';
            form.querySelector('.resultBlock .set > p').innerHTML = '';
        }

        function showResultBlock(formElement) {
            var form = formElement instanceof jQuery ? formElement[0] : formElement;
            form.querySelector('.no-result-block').classList.remove('active');
            form.querySelector('.has-result-block').classList.add('active');
            form.querySelector('.resultBlock').classList.add('hasResult');
        }

        function hideResultBlock(formElement) {
            var form = formElement instanceof jQuery ? formElement[0] : formElement;
            form.querySelector('.no-result-block').classList.add('active');
            form.querySelector('.has-result-block').classList.remove('active');
            form.querySelector('.resultBlock').classList.remove('hasResult');
        }

        $('#startBlock').on('click', '.seriesTab', function () {
            var form = $(this).closest('form');
            resetForm(form);
            clearResultBlock(form);
            hideResultBlock(form);
        });

        $('body').on('click', '.hideResult', function () {
            hideResultBlock($(this).closest('form'));
        });

        /*=== begin calculator submit ===*/
        function submitCalcForm(formId, tariffChosenId, tariffSelectId, statusChosenId, statusSelectId) {

            if (!ValidationModule.isValid($(formId))) return false;

            // start set Results function
            function setResults(response, formId) {
                // start set intermidiate results
                var overPayment = response.data.overPayment.toFixed(2);
                var amount = response.data.amount.toFixed(2);

                var $overPaymentBlock = $(formId + ' .overPayment-js');
                var $amountBlock = $(formId + ' .amount-js');
                var $amountDiscoundBlock = $(formId + ' .amount-discount-js');
                var $tariffLink = $(formId + ' .js_setTariff');
                var $choosenTariffText = $(tariffChosenId + ' .chosen-single span').text();

                function setTarriffText() {
                    var $options = $('#3 option');
                    // console.log($options);
                    for (var i = 0; i < $options.length; i++) {
                        var $text = $($options[i]).text();
                        // console.log($text);

                        if ($text == $choosenTariffText) {
                            var $tariffText = $($options[i]).data('tariff');
                            if ($tariffText) {
                                // console.log($tariffText);

                                $tariffLink.text('"' + $tariffText + '"');
                                return;
                            }
                        }
                    }
                    $tariffLink.text('"' + $choosenTariffText + '"');
                };

                function setDisplayBlocks(formId) {
                    var $persentBlock = $(formId + ' .has-result-block .graph-item:nth(1)');
                    var $discountPersentBlock = $(formId + ' .has-result-block .graph-item:nth(2)');
                    // let $options = $('#3 option');
                    // console.log($options.length);

                    $persentBlock.removeClass('disabled');
                    $discountPersentBlock.hide();

                    // for(let i = 0; i < $options.length; i++) {
                    //   let $text = $($options[i]).text();
                    //   if($text == $choosenTariffText) {
                    //     let $lowPersentId = $($options[i]).data('id');
                    //     console.log($lowPersentId);

                    // if($lowPersentId == 11) {
                    //   $persentBlock.addClass('disabled');
                    //   $discountPersentBlock.show();
                    // } else {
                    //   $persentBlock.removeClass('disabled');
                    //   $discountPersentBlock.hide();
                    // }
                    // }
                    // }
                };

                $overPaymentBlock.text(overPayment + ' грн');
                $amountBlock.text(amount + ' грн');
                $amountDiscoundBlock.text((overPayment - overPayment * 20 / 100).toFixed(2) + ' грн');
                setTarriffText();
                setDisplayBlocks(formId);
                // end set intermidiate results

                $(formId + ' .calcModal').on('click', function (e) {
                    e.preventDefault();
                    var requestBtn = document.querySelector('#popupRequest .submitButtonWrapper button[type=submit]');
                    // start get resultForm fields
                    var $resWeight = $('.resWeight-js');
                    var $resHalljs = $('.resHall-js');
                    var $resStones = $('.resStones-js');
                    var $resTariff = $('.resTariff-js');
                    var $resDays = $('.resDays-js');
                    var $resOverPayment = $('.resOverPayment-js');
                    var $resAmount = $('.resAmount-js');
                    // end get resultForm fields
                    // start set resultForm fields
                    $resWeight.text($(formId + ' input[name=weight]').val());
                    $resHalljs.text($(formId + ' select[name=hallmark]').val());
                    $resStones.text($(formId + ' input[name=additions]:checked').hasClass('yes') ? globalVariables.messages.yes : globalVariables.messages.no);
                    $resTariff.text($(formId + ' select[name=tariff]').val());
                    $resDays.text($(formId + ' .slider-range').slider('value'));
                    $resOverPayment.text(overPayment + ' грн');
                    $resAmount.text(amount + ' грн');
                    // end set resultForm fields
                    // start set resultForm chosen Cities
                    var $citiesResSelect = $('#404m');

                    function initResFormCities(response) {
                        var cities = response.data;
                        var cityKey = globalFunctions.getLanguage() === 'ru' ? 'title_ru' : 'title_uk';
                        setChosenParams(cities, $citiesResSelect, cityKey);
                    };

                    var getCalcCities = getCalcData(initResFormCities);
                    getCalcCities('/calculator/get-cities');
                    // end set resultForm chosen Cities
                    // start send finish results
                    function requestFinalData(e) {
                        e.preventDefault();

                        var $calcForm = $(this).closest($('.calculate-form'));
                        if (!ValidationModule.isValid($calcForm)) return false;

                        var $inputName = $('#401m');
                        var $inputPhone = $('#402m');
                        var $inputEmail = $('#403m');
                        var $chosenCity = $('#404m_chosen .chosen-single span');
                        // let files = $('#photoDropzoneModal').get(0).dropzone.getAcceptedFiles();
                        var files = $('#popupRequest input[name^=files]');
                        var category = formId == '#gold-form' ? globalVariables.messages.gold : globalVariables.messages.silver;

                        var finishSubmitData = {
                            'weight': Number($resWeight.text()),
                            'hallmark': Number($resHalljs.text()),
                            'stone': $resStones.text() == globalVariables.messages.yes ? 1 : 0,
                            'tariff': $resTariff.text(),
                            'term': Number($resDays.text()),
                            'overpayment': Number($resOverPayment.text().replace(/\s?[а-я]/gi, '')),
                            'amount': Number($resAmount.text().replace(/\s?[а-я]/gi, '')),
                            'name': $inputName.val(),
                            'phone': $inputPhone.val(),
                            'email': $inputEmail.val(),
                            'city': $chosenCity.text(),
                            'client_status': $(statusChosenId + ' .chosen-single span').text(),
                            'category': category
                        };

                        if (files.val()) finishSubmitData.files = files.val();

                        // console.log(finishSubmitData);

                        function handleGoldAndSilverFormsStatistic() {
                            if (dataLayer) {
                                console.log('in handleGoldAndSilverFormsStatistic: category', finishSubmitData.category);
                                finishSubmitData.category == 'Золото' ? dataLayer.push({ 'event': 'calculate_zoloto' }) : dataLayer.push({ 'event': 'calculate_silver' });
                            }
                        }

                        axios({
                            method: 'post',
                            url: '/calculator/requests',
                            data: finishSubmitData
                            // headers: {'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')},
                            // headers: {'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content'), 'Content-Type': 'application/json'},
                            // withCredentials: true,
                        }).then(function (response) {
                            onSuccessSubmit();
                            handleGoldAndSilverFormsStatistic();
                            PopupModule.closePopup(document.getElementById('popupRequest'));
                            // console.log(response.data);
                        }).catch(function (error) {
                            onErrorSubmit();
                            // PopupModule.closePopup(document.getElementById('popupRequest'));
                            console.log(error);
                        });
                    };

                    requestBtn.onclick = requestFinalData;
                    // end send finish results
                });
            };
            // end set Results function
            // start tariff & status ID
            function getId(chosenId, selectId) {
                var chosenText = $(chosenId + ' .chosen-single span').text();
                var selectOptions = $(selectId + ' option');
                var selectOptionsText = [];
                for (var i = 0; i < selectOptions.length; i++) {
                    selectOptionsText[i] = $(selectOptions[i]).text();
                }
                var selectIndex = selectOptionsText.indexOf(chosenText);
                if (chosenId == '#3_chosen' || chosenId == '#35_chosen') {
                    return $(selectOptions[selectIndex]).data('id');
                } else if (chosenId == '#4_chosen' || chosenId == '#36_chosen') {
                    return $(selectOptions[selectIndex]).data('id');
                }
            };

            var tariffIndex = getId(tariffChosenId, tariffSelectId) || $(tariffSelectId + ' option:selected').data('id');
            var statusIndex = getId(statusChosenId, statusSelectId) || $(statusSelectId + ' option:selected').data('id');

            var submitData = {
                'weight': $(formId + ' input[name=weight]').val(),
                'hallmark': $(formId + ' select[name=hallmark]').val(),
                'tariff': tariffIndex,
                'status': statusIndex,
                'days': $(formId + ' .slider-range').slider('value')
            };
            // console.log(submitData);

            axios.get('/calculator/calculate', { params: submitData }).then(function (response) {
                // console.log(response);
                showResultBlock($(formId));
                setResults(response, formId);
            }).catch(function (error) {
                onErrorSubmit(error.response.status);
                // console.log(error);
            });

            function onSuccessSubmit() {
                var modal = document.getElementById('popupMessage');
                var modalTitle = modal.querySelector('.title').innerHTML = globalVariables.messages.successResponse;
                var modalContent = modal.querySelector('.description > p').innerHTML = globalVariables.messages.successDescr;
                // resetForm(formElement);
                PopupModule.openPopup(modal);
            };

            function onErrorSubmit(status) {
                var modal = document.getElementById('popupMessage');
                var modalTitle = modal.querySelector('.title').innerHTML = globalVariables.messages.errorResponse;
                var modalContent = modal.querySelector('.description > p').innerHTML = globalVariables.messages.errorDescr;
                if (status === 400) {
                    var _modalContent = modal.querySelector('.description > p').innerHTML = globalVariables.messages.errorDescr400;
                }
                PopupModule.openPopup(modal);
            };
        };

        $('.calculate-form').on('submit', function () {
            return false;
        });

        $('.calculate-form').on('click', '.submitButton', function (e) {
            e.preventDefault();
            var form = this.form;

            if ($(this).closest('.calculate-form').is('#gold-form')) {
                submitCalcForm('#gold-form', '#3_chosen', '#3', '#4_chosen', '#4');
            } else if ($(this).closest('.calculate-form').is('#silver-form')) {
                submitCalcForm('#silver-form', '#35_chosen', '#35', '#36_chosen', '#36');
            } else if ($(this).closest('.calculate-form').is('#technics-form')) {
                var showTechImage = function showTechImage(selectedModel, form) {
                    var $form = $(form);
                    $form.find('.resultBlock .imgWrapper > img').show();

                    if (selectedModel.image) {
                        $form.find('.resultBlock .imgWrapper > img').attr("src", selectedModel.image);
                    } else {
                        $form.find('.resultBlock .imgWrapper > img').hide();
                    }
                };

                var showMessageSMS = function showMessageSMS() {
                    $('.request-answer').addClass('flex');
                };

                var hideMessageSMS = function hideMessageSMS() {
                    $('.request-answer').removeClass('flex');
                };

                var setResultsBlock = function setResultsBlock(form, button) {
                    return function (response) {
                        var finalPrice = Math.floor(response.data);
                        form.querySelector('.resultBlock .product-description .name').innerHTML = selectedModel.model;
                        // form.querySelector('.resultBlock .product-description .price').innerHTML = 'до ' + finalPrice + ' грн.';
                        form.querySelector('.resultBlock .product-description input[name="price"]').value = finalPrice;
                        form.querySelector('.resultBlock .imgWrapper input[name="image"]').value = selectedModel.image;

                        showMessageSMS();
                        showTechImage(selectedModel, form);

                        // showResultBlock(form);
                        SwitchTabsModule.switchSeriesTabs(button, seriesTabsBlocksList, globalVariables.currentGroup);
                        globalFunctions.animateBlock(toggleBlocksWrapper2);
                    };
                };

                var conditionSelectedElement = form.querySelector('input[name="condition"]:checked');
                var setSelectedElement = form.querySelector('input[name="set"]:checked');
                form.querySelector('.resultBlock .condition > p').innerHTML = conditionSelectedElement.value;
                form.querySelector('.resultBlock .set > p').innerHTML = setSelectedElement.value;
                var toggleBlocksWrapper2 = document.getElementsByClassName('subToggleBlocks-list')[0];
                var seriesTabsBlocksList = document.querySelectorAll('.subToggleBlocks-list > .toggleBlock');
                var technicTabDropzonePhoto = $('#technics-tab .photoDropzone .dz-image img').attr('src');
                if (technicTabDropzonePhoto) {
                    form.querySelector('.resultBlock .imgWrapper > img').src = technicTabDropzonePhoto;
                    $(form).find('.resultBlock .imgWrapper > img').show();
                }

                if (selectedModel) {
                    var conditionMult = conditionSelectedElement.dataset.multiplier;
                    var setMult = setSelectedElement.dataset.multiplier;
                    var priceUrl = '/calculator/correct-price/' + selectedModel.price + '/' + conditionMult + '/' + setMult;
                    globalFunctions.getData(priceUrl, setResultsBlock(this.form, this));
                } else {
                    var nameStringArr = [];
                    $('#101').val() ? nameStringArr.push($('#101').val()) : null;
                    $('#102').val() ? nameStringArr.push($('#102').val()) : null;
                    $('#103').val() ? nameStringArr.push($('#103').val()) : null;
                    $('#106').val() ? nameStringArr.push($('#106').val()) : null;
                    $('#107').val() ? nameStringArr.push($('#107').val()) : null;
                    $('#108').val() ? nameStringArr.push($('#108').val()) : null;
                    $('#109').val() ? nameStringArr.push($('#109').val()) : null;
                    var nameString = nameStringArr.join(', ');

                    form.querySelector('.resultBlock .product-description .name').innerHTML = nameString;
                    hideMessageSMS();
                    showResultBlock(form);
                    SwitchTabsModule.switchSeriesTabs(this, seriesTabsBlocksList, globalVariables.currentGroup);
                    globalFunctions.animateBlock(toggleBlocksWrapper2);
                }
            }
        });

        // -----gadgets Submit-----
        // function toggleWideBlock(parent) {
        //   let choseCategoryBlock = parent.getElementsByClassName('choseCategoryBlock')[0];
        //   let successBlock = parent.getElementsByClassName('successBlock')[0];
        //   let resultBlock = parent.parentElement.nextElementSibling;

        //   choseCategoryBlock.classList.contains('active') || successBlock.classList.contains('active') ?
        //     globalFunctions.showBlock(resultBlock, 'js_hide') : globalFunctions.hideBlock(resultBlock, 'js_hide');
        // }
        function cleanDropZones() {
            if (globalVariables.myDropzone && globalVariables.myDropzone.length) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = globalVariables.myDropzone[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var zone = _step.value;

                        zone.removeAllFiles(true);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        };

        function unlockSubmitButtons() {
            var $buttonContainer = $('.calculate-form .more-button-container.js_loading');
            $buttonContainer.removeClass('js_loading');
            $buttonContainer.children('.submitFormButton').removeClass('js_loading');
            $buttonContainer.children('.submitFormButton').removeAttr("disabled");
        };

        function submitData(url, data, callback, params) {
            axios.defaults.headers.common['X-CSRF-TOKEN'] = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

            function query(url, data, params) {
                axios({
                    method: 'post',
                    url: url,
                    data: data
                    // withCredentials: true,
                    // headers: { 'Content-Type': 'application/json' },
                    // headers: {'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')},
                }).then(function (response) {
                    // console.log(response)
                    if (response.status == 200) {
                        callback(response);
                        cleanDropZones();
                        unlockSubmitButtons();
                    }
                }).catch(function (error) {
                    console.error(error);
                    callback(error);
                    cleanDropZones();
                    unlockSubmitButtons();
                });
            };

            query(url, data, params);
        }

        function prepareFormData(form) {
            var inputs = form.querySelectorAll('input:not([type=radio])');
            var inputsRadio = form.querySelectorAll('input[type=radio]');
            var selects = form.querySelectorAll('select');
            var textareas = form.querySelectorAll('textarea');

            var formData = {};
            // console.log(textareas)
            if (inputs.length) {
                for (var i = 0; i < inputs.length; i++) {
                    inputs[i].value ? formData[inputs[i].name] = inputs[i].value : null;
                }
            }

            if (inputsRadio.length) {
                for (var _i = 0; _i < inputsRadio.length; _i++) {
                    var currInput = inputsRadio[_i];
                    currInput.value && currInput.checked ? formData[currInput.name] = currInput.value : null;
                }
            }

            if (selects.length) {
                for (var _i2 = 0; _i2 < selects.length; _i2++) {
                    selects[_i2].value && selects[_i2].value != 'placeholder' ? formData[selects[_i2].name] = selects[_i2].value : null;
                }
            }

            if (textareas.length) {
                for (var _i3 = 0; _i3 < textareas.length; _i3++) {
                    textareas[_i3].value ? formData[textareas[_i3].name] = textareas[_i3].value : null;
                }
            }

            // formData = JSON.stringify( formData );
            return formData;
        }

        function switchShowBtns() {
            $('.js_block_toggle').toggleClass('active');
        }

        $('.calculate-form').on('click', '.submitFormButton', function () {
            var currentToggleBlock = $(this).closest('.toggleBlock');
            // console.log(currentToggleBlock);
            // $('.calculate-form .submitFormButton').addClass('js_loading');

            if (ValidationModule.isValid(currentToggleBlock)) {
                $(this.parentElement).addClass('js_loading');
                $(this).addClass('js_loading');
                this.setAttribute('disabled', 'true');
                var form = this.form;
                var formData = prepareFormData(form);
                // console.log(form)
                // console.log(formData);

                if (form.id === 'technics-form') {
                    var successSubmit = function successSubmit(form, button) {
                        return function (data) {
                            // let resultPageTitle = document.querySelector('.successBlock .page-title');
                            // let resultPageCategory = document.querySelector('.successBlock .category-name');

                            // resultPageCategory.innerHTML = '';
                            $('.request-answer').show();
                            if (data.status == 200) {
                                handleGadgetsStatistic();
                                // resetForm(form);
                                // clearResultBlock(form);
                                // hideResultBlock(form);
                                // resultPageTitle.innerHTML = globalVariables.messages.successResponse;
                            } else if (data.response && data.response.status == 400) {
                                $('.request-answer').hide();
                                onErrorSubmit();
                            } else if (data.response && data.response.status) {
                                $('.request-answer__text').text(globalVariables.messages.errorResponseGadgets); /* !!! */
                                // resultPageTitle.innerHTML = globalVariables.messages.errorResponse;
                                // resultPageCategory.innerHTML = error;
                            }

                            wasSubmited = true;
                            switchShowBtns();
                            showResultBlock(form);

                            // let toggleBlocksWrapper2 = document.getElementsByClassName('subToggleBlocks-list')[0];
                            // let seriesTabsBlocksList = document.querySelectorAll('.subToggleBlocks-list > .toggleBlock');
                            // SwitchTabsModule.switchSeriesTabs(button, seriesTabsBlocksList, globalVariables.currentGroup);
                            // globalFunctions.animateBlock(toggleBlocksWrapper2);
                            // toggleWideBlock(toggleBlocksWrapper2);
                        };
                    };

                    var handleGadgetsStatistic = function handleGadgetsStatistic() {
                        if (dataLayer) {
                            console.log('in handleGadgetsStatistic');
                            dataLayer.push({ 'event': 'calculate_technique' });
                        }
                    };

                    var onErrorSubmit = function onErrorSubmit() {
                        var modal = document.getElementById('popupMessage');
                        var modalTitle = modal.querySelector('.title').innerHTML = globalVariables.messages.errorResponseGadgets;
                        // let modalContent = modal.querySelector('.description > p').innerHTML = globalVariables.messages.errorResponse;
                        PopupModule.openPopup(modal);
                    };

                    $('.toggleBlock.active .prevButton, .toggleBlock.active .seriesTab').on('click', function () {
                        if (wasSubmited) {
                            switchShowBtns();
                            wasSubmited = false;
                        }
                        $('.toggleBlock.active .prevButton, .toggleBlock.active .seriesTab').off('click');
                    });

                    ;

                    submitData('/calculator/gadgets-requests', formData, successSubmit(form, this));
                } else if (form.classList.contains('special_ability_form')) {
                    // console.log('special_ability_form')
                    var _successSubmit = function _successSubmit(formElement, formData) {
                        return function (response) {
                            var modal = document.getElementById('popupMessage');
                            if (response.status == 200) {
                                var modalTitle = modal.querySelector('.title').innerHTML = globalVariables.messages.successResponse;
                                var modalContent = modal.querySelector('.description > p').innerHTML = globalVariables.messages.successDescr;
                                resetForm(formElement);
                                handleDiamondsAntiquesClocksJewelryStatistic(formData);
                            } else {
                                var _modalTitle = modal.querySelector('.title').innerHTML = globalVariables.messages.errorResponse;
                                var _modalContent2 = modal.querySelector('.description > p').innerHTML = globalVariables.messages.errorDescr;
                            }

                            PopupModule.openPopup(modal);
                        };
                    };

                    var handleDiamondsAntiquesClocksJewelryStatistic = function handleDiamondsAntiquesClocksJewelryStatistic(formData) {
                        if (dataLayer) {
                            console.log('in handleDiamondsAntiquesClocksJewelryStatistic type:', formData.type);
                            switch (formData.type) {
                                case "diamond":
                                    dataLayer.push({ 'event': 'calculate_diamond' });
                                    break;
                                case "antiques":
                                    dataLayer.push({ 'event': 'calculate_antiques' });
                                    break;
                                case "watch":
                                    dataLayer.push({ 'event': 'calculate_clock' });
                                    break;
                                case "jewelry":
                                    dataLayer.push({ 'event': 'calculate_jewerly' });
                                    break;
                            }
                        }
                    };

                    submitData('/calculator/special-abilities', formData, _successSubmit(form, formData));
                }
            }
        });
        /*=== end calculator submit ===*/

        function setChosenParams(obj, $select, val) {

            $select.empty();
            $select.append('<option value="placeholder" style="display:none">' + $select.data('placeholder') + '</option>');
            if (typeof obj[0] === 'string') {
                console.log('string');
                for (var i = 0; i < obj.length; i++) {
                    $select.append('<option>' + obj[i] + '</option>');
                }
            } else {
                console.log('map');
                obj.map(function (el) {
                    if (el.id) {
                        if (el.related_tariff) {
                            var isLang = $('body').data('locale') == 'ru' ? 'title_ru' : 'title_uk';
                            var relatedTariff = el.related_tariff[isLang];
                            // console.log(relatedTariff);
                            var dataTariff = relatedTariff.replace(/"/g, "");
                            // console.log(dataTariff);

                            $select.append('<option data-tariff="' + dataTariff + '" data-id="' + el.id + '">' + el[val] + '</option>');
                        } else {
                            $select.append('<option data-id="' + el.id + '">' + el[val] + '</option>');
                        }
                    } else {
                        $select.append('<option>' + el[val] + '</option>');
                    }
                });
            }
            $select.trigger("chosen:updated");
            // console.log(1);
        };

        function getCalcData(func) {
            return function (url, params) {
                axios.get(url, params).then(function (response) {
                    func(response);
                }).catch(function (error) {
                    console.log(error);
                });
            };
        };

        /*=== begin hallmarks ===*/
        function onChangeHallmarksSelect($curSelect, $targetSelect, fn) {
            $curSelect.chosen().change(function (evt, param) {
                $targetSelect.prop('disabled', false).trigger("chosen:updated");
                // console.log(evt);
                // console.log(param);
                fn('/calculator/get-tariffs', {
                    params: {
                        'hallmark': '' + (this[this.selectedIndex].value || param.selected)
                    }
                });
            });
        };

        /*=== begin Gold ===*/
        function initCalcHallmarksGold(response) {
            var hallmarks = response.data;
            setChosenParams(hallmarks, $hellmarksSelectGold, 'hallmark');
            onChangeHallmarksSelect($hellmarksSelectGold, $tariffsSelectGold, getCalcTariffsGold);
        };

        var getCalcHallmarksGold = getCalcData(initCalcHallmarksGold);
        getCalcHallmarksGold('/calculator/get-hallmarks', {
            params: {
                'category': '1'
            }
        });
        /*=== end Gold ===*/
        /*=== begin Silver ===*/
        function initCalcHallmarksSilver(response) {
            var hallmarks = response.data;
            setChosenParams(hallmarks, $hellmarksSelectSilver, 'hallmark');
            onChangeHallmarksSelect($hellmarksSelectSilver, $tariffsSelectSilver, getCalcTariffsSilver);
        };

        var getCalcHallmarksSilver = getCalcData(initCalcHallmarksSilver);
        getCalcHallmarksSilver('/calculator/get-hallmarks', {
            params: {
                'category': '2'
            }
        });
        /*=== end Silver ===*/
        /*=== end hallmarks ===*/

        /*=== begin tariffs ===*/
        // function setChsnTarfPlchldr (selectId) {
        //   selectId.find('option[value=placeholder]').attr('selected', true);
        //   selectId.trigger("chosen:updated");
        //   console.log(selectId);
        //   console.log(2);
        // };
        /*=== begin Gold ===*/
        function initCalcTariffsGold(response) {
            // console.log(response.data);
            var tarriffs = response.data.filter(function (item) {
                return item.calc_category_id == 1;
            });
            var isLang = $('body').data('locale') == 'ru' ? 'title_ru' : 'title_uk';
            setChosenParams(tarriffs, $tariffsSelectGold, isLang);
            // setChsnTarfPlchldr($tariffsSelectGold);
            onChangeTariffSelect($tariffsSelectGold, response.data, isLang, $goldSlider, 1, $statusSelectGold);
        };

        var getCalcTariffsGold = getCalcData(initCalcTariffsGold);
        $tariffsSelectGold.prop('disabled', true).trigger("chosen:updated");
        /*=== end Gold ===*/
        /*=== begin Silver ===*/
        function initCalcTariffsSilver(response) {
            var tarriffs = response.data.filter(function (item) {
                return item.calc_category_id == 2;
            });
            var isLang = $('body').data('locale') == 'ru' ? 'title_ru' : 'title_uk';
            setChosenParams(tarriffs, $tariffsSelectSilver, isLang);
            // setChsnTarfPlchldr($tariffsSelectSilver);
            onChangeTariffSelect($tariffsSelectSilver, response.data, isLang, $silverSlider, 2, $statusSelectSilver);
        };

        var getCalcTariffsSilver = getCalcData(initCalcTariffsSilver);
        $tariffsSelectSilver.prop('disabled', true).trigger("chosen:updated");
        /*=== end Silver ===*/
        /*=== end tariffs ===*/
        /*=== begin terms ===*/
        function onChangeTariffSelect($curSelect, data, lang, categorySlider, categoryId, statusSelect) {
            // $curSelect.off();
            $curSelect.chosen().change(function (evt, param) {
                var _this = this;

                // console.log("========== 1");
                // console.log(data);
                // console.log(param);
                // console.log('this val', $(this).val());
                // console.log(categoryId);
                // console.log(lang);

                var tariffData = data.filter(function (item) {
                    // console.log(item.calc_category_id == categoryId);
                    // console.log(item[lang] == param.selected);
                    if (window.innerWidth < 768) {
                        return item.calc_category_id == categoryId && item[lang] == $(_this).val();
                    }
                    return item.calc_category_id == categoryId && item[lang] == param.selected;
                });

                // console.log("========== 2");
                // console.log('tariffData', tariffData);
                // console.log('tariffData[0]', tariffData[0]);
                // console.log('tariffData[0].terms', tariffData[0].terms);
                // console.log('tariffData[0].terms.length', tariffData[0].terms.length);

                var maxDays = void 0;
                // if(tariffData[0].terms.length > 1) {
                maxDays = tariffData[0].terms[tariffData[0].terms.length - 1].to;
                // } else {
                // maxDays = 1;
                // }

                categorySlider.slider('option', {
                    disabled: false,
                    max: maxDays,
                    value: 1
                });

                var sliderValue = categorySlider.slider('value');

                categorySlider.find('.text').text(sliderValue);

                setChoosenStatuses(data, lang, categoryId, param, statusSelect, $curSelect);
            });
        };
        /*=== end terms ===*/
        /*=== begin statuses ===*/
        // $statusSelectGold.prop('disabled', true).trigger("chosen:updated");
        // $statusSelectSilver.prop('disabled', true).trigger("chosen:updated");

        function setChoosenStatuses(data, lang, categoryId, param, statusSelect, $curSelect) {
            var tariffData = data.filter(function (item) {
                if (window.innerWidth < 768) {
                    // console.log('categoryId', categoryId);
                    // console.log('$curSelect', $curSelect);
                    // console.log($curSelect.val());
                    var selectVal = $curSelect.val();

                    return item.calc_category_id == categoryId && item[lang] == selectVal;
                }
                return item.calc_category_id == categoryId && item[lang] == param.selected;
            });

            // console.log(tariffData);

            statusSelect.empty();
            // statusSelect.append(`<option value="placeholder" style="display:none">${statusSelect.data('placeholder')}</option>`);
            tariffData[0].statuses.map(function (el) {
                statusSelect.append('<option data-id="' + el.id + '">' + el[lang] + '</option>');
            });
            statusSelect.prop('disabled', false).trigger("chosen:updated");
        };
        /*=== end statuses ===*/
    })();

    // ====================================================================
    /*=== begin gadgets ===*/
    (function () {
        if (!$('#calculatorPage').length && !$('#specialPage').length) return;

        function getElementId(element, content) {
            var result = void 0;

            if (element) {
                var childs = element.children;

                if (childs) {
                    for (var i = 0; i < childs.length; i++) {
                        if (childs[i].innerHTML === content) {
                            result = childs[i].dataset.id;
                            break;
                        }
                    }
                }
            }
            return result;
        }

        function getCollectionItem(collection, itemValue, valueKey) {
            var result = null;

            if (collection) {
                for (var i = 0; i < collection.length; i++) {
                    if (collection[i][valueKey] == itemValue) {
                        result = collection[i];
                        break;
                    }
                }
            }
            return result;
        }

        // -------- Axios responses API -----------

        function setSelectData(element, data, key, key2) {
            element.empty();
            element.append('<option value="placeholder" style="display:none">' + element.data('placeholder') + '</option>');
            // console.log( data)
            if (data) {
                if (Array.isArray(data) && _typeof(data[0]) != 'object') {
                    for (var i = 0; i < data.length; i++) {
                        element.append('<option>' + data[i] + '</option>');
                    }
                } else if (_typeof(data[0]) === 'object') {
                    data.map(function (el) {
                        var option = document.createElement('option');
                        option.setAttribute('data-id', el.id || 'none');
                        option.innerHTML = key2 ? el[key] + ' (' + el[key2] + ')' : el[key];
                        // element.append(`<option data-id="${el.id || 'none'}">${el[key]} ${key2 ? el[key2] : ''}</option>`);
                        element.append($(option));
                    });
                }

                element.trigger("chosen:updated");
            }
        }

        if ($('#calculatorPage').length) {
            var setModels = function setModels(response) {
                models = response.data.models;
                setSelectData($modelsSelect, response.data.models, 'model');
                $modelsSelect.prop('disabled', false).trigger("chosen:updated");
            };

            var setDepartments = function setDepartments(response) {
                // console.log(response.data)
                var departmentKey = globalFunctions.getLanguage() === 'ru' ? 'meta_title_ru' : 'meta_title_uk';
                var addressKey = globalFunctions.getLanguage() === 'ru' ? 'address_ru' : 'address_uk';

                if (response.data.length) {
                    // console.log(response.data)
                    setSelectData($departmentsSelect, response.data, departmentKey, addressKey);
                    $departmentsSelect.prop('disabled', false).trigger("chosen:updated");
                }
            };

            var $brandsSelect = $('#311');
            var $modelsSelect = $('#312');
            var $citiesSelect = $('#404');
            var $departmentsSelect = $('#405');

            var setBrands = function setBrands(response) {
                setSelectData($brandsSelect, response.data.brands);
            };
            globalFunctions.getData('/calculator/get-brands', setBrands);

            $modelsSelect.prop('disabled', true).trigger("chosen:updated");
            $brandsSelect.chosen().change(function (e, param) {
                // console.log(this[this.selectedIndex].value)
                var params = { 'brand': this[this.selectedIndex].value || param.selected };
                globalFunctions.getData('/calculator/get-models', setModels, { params: params });
            });

            $modelsSelect.chosen().change(function (e, param) {
                selectedModel = getCollectionItem(models, this[this.selectedIndex].value, 'model');
            });

            /*=== begin step 4 calculate ===*/
            var setCities = function setCities(response) {
                var cityKey = globalFunctions.getLanguage() === 'ru' ? 'title_ru' : 'title_uk';
                setSelectData($citiesSelect, response.data, cityKey);
            };
            globalFunctions.getData('/calculator/get-cities', setCities);

            $departmentsSelect.prop('disabled', true).trigger("chosen:updated");
            $citiesSelect.chosen().change(function (e, param) {
                var id = getElementId(e.target, this[this.selectedIndex].value || param.selected);
                if (id) {
                    globalFunctions.getData('/calculator/get-departments/' + id, setDepartments);
                }
            });

            /*=== end step 4 calculate ===*/
        }

        if ($('#specialPage').length) {
            var $watchBrandsSelect = $('#301');

            var _setBrands = function _setBrands(response) {
                // console.log(response.data)
                setSelectData($watchBrandsSelect, response.data, 'brand');
            };
            globalFunctions.getData('/calculator/get-watches', _setBrands);
        }
    })();
    /*=== end gadgets ===*/

    /* end calculator staff */
});

/***/ })

/******/ });